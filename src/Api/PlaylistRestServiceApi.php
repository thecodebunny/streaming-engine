<?php
/**
 * PlaylistRestServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */

/**
 * Streaming Server REST API Reference
 *
 * Streaming Server REST API Reference
 *
 * OpenAPI spec version: V2.0
 * Contact: contact@thecodebunny.com
 * Generated by: https://github.com/tcb-api/tcb-codegen.git
 * TCB Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the tcb code generator program.
 * https://github.com/tcb-api/tcb-codegen
 * Do not edit the class manually.
 */

namespace Thecodebunny\StreamingEngine\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Thecodebunny\StreamingEngine\ApiException;
use Thecodebunny\StreamingEngine\Configuration;
use Thecodebunny\StreamingEngine\HeaderSelector;
use Thecodebunny\StreamingEngine\ObjectSerializer;

/**
 * PlaylistRestServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */
class PlaylistRestServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPlaylist
     *
     * Create Playlist
     *
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (optional)
     * @param  bool $auto_start If it&#39;s true, it starts automatically pulling playlist broadcasts. Default value is false by default (optional, default to false)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Thecodebunny\StreamingEngine\Model\Result
     */
    public function createPlaylist($body = null, $auto_start = 'false')
    {
        list($response) = $this->createPlaylistWithHttpInfo($body, $auto_start);
        return $response;
    }

    /**
     * Operation createPlaylistWithHttpInfo
     *
     * Create Playlist
     *
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (optional)
     * @param  bool $auto_start If it&#39;s true, it starts automatically pulling playlist broadcasts. Default value is false by default (optional, default to false)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Thecodebunny\StreamingEngine\Model\Result, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPlaylistWithHttpInfo($body = null, $auto_start = 'false')
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->createPlaylistRequest($body, $auto_start);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Thecodebunny\StreamingEngine\Model\Result',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPlaylistAsync
     *
     * Create Playlist
     *
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (optional)
     * @param  bool $auto_start If it&#39;s true, it starts automatically pulling playlist broadcasts. Default value is false by default (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlaylistAsync($body = null, $auto_start = 'false')
    {
        return $this->createPlaylistAsyncWithHttpInfo($body, $auto_start)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPlaylistAsyncWithHttpInfo
     *
     * Create Playlist
     *
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (optional)
     * @param  bool $auto_start If it&#39;s true, it starts automatically pulling playlist broadcasts. Default value is false by default (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlaylistAsyncWithHttpInfo($body = null, $auto_start = 'false')
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->createPlaylistRequest($body, $auto_start);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPlaylist'
     *
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (optional)
     * @param  bool $auto_start If it&#39;s true, it starts automatically pulling playlist broadcasts. Default value is false by default (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPlaylistRequest($body = null, $auto_start = 'false')
    {

        $resourcePath = '/v2/playlists/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($auto_start !== null) {
            $queryParams['autoStart'] = ObjectSerializer::toQueryValue($auto_start);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePlaylist
     *
     * Delete specific Playlist
     *
     * @param  string $playlist_id the playlistId of the Playlist (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Thecodebunny\StreamingEngine\Model\Result
     */
    public function deletePlaylist($playlist_id)
    {
        list($response) = $this->deletePlaylistWithHttpInfo($playlist_id);
        return $response;
    }

    /**
     * Operation deletePlaylistWithHttpInfo
     *
     * Delete specific Playlist
     *
     * @param  string $playlist_id the playlistId of the Playlist (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Thecodebunny\StreamingEngine\Model\Result, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePlaylistWithHttpInfo($playlist_id)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->deletePlaylistRequest($playlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Thecodebunny\StreamingEngine\Model\Result',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePlaylistAsync
     *
     * Delete specific Playlist
     *
     * @param  string $playlist_id the playlistId of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePlaylistAsync($playlist_id)
    {
        return $this->deletePlaylistAsyncWithHttpInfo($playlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePlaylistAsyncWithHttpInfo
     *
     * Delete specific Playlist
     *
     * @param  string $playlist_id the playlistId of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePlaylistAsyncWithHttpInfo($playlist_id)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->deletePlaylistRequest($playlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePlaylist'
     *
     * @param  string $playlist_id the playlistId of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePlaylistRequest($playlist_id)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling deletePlaylist'
            );
        }

        $resourcePath = '/v2/playlists/{playlistId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editPlaylist
     *
     * Edit Playlist
     *
     * @param  string $playlist_id id of the Playlist (required)
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Thecodebunny\StreamingEngine\Model\Result
     */
    public function editPlaylist($playlist_id, $body)
    {
        list($response) = $this->editPlaylistWithHttpInfo($playlist_id, $body);
        return $response;
    }

    /**
     * Operation editPlaylistWithHttpInfo
     *
     * Edit Playlist
     *
     * @param  string $playlist_id id of the Playlist (required)
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Thecodebunny\StreamingEngine\Model\Result, HTTP status code, HTTP response headers (array of strings)
     */
    public function editPlaylistWithHttpInfo($playlist_id, $body)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->editPlaylistRequest($playlist_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Thecodebunny\StreamingEngine\Model\Result',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editPlaylistAsync
     *
     * Edit Playlist
     *
     * @param  string $playlist_id id of the Playlist (required)
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPlaylistAsync($playlist_id, $body)
    {
        return $this->editPlaylistAsyncWithHttpInfo($playlist_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editPlaylistAsyncWithHttpInfo
     *
     * Edit Playlist
     *
     * @param  string $playlist_id id of the Playlist (required)
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPlaylistAsyncWithHttpInfo($playlist_id, $body)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->editPlaylistRequest($playlist_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editPlaylist'
     *
     * @param  string $playlist_id id of the Playlist (required)
     * @param  \Thecodebunny\StreamingEngine\Model\Playlist $body the name of the Playlist File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editPlaylistRequest($playlist_id, $body)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling editPlaylist'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling editPlaylist'
            );
        }

        $resourcePath = '/v2/playlists/edit/{playlistId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlaylist
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Thecodebunny\StreamingEngine\Model\Playlist
     */
    public function getPlaylist($playlist_id)
    {
        list($response) = $this->getPlaylistWithHttpInfo($playlist_id);
        return $response;
    }

    /**
     * Operation getPlaylistWithHttpInfo
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Thecodebunny\StreamingEngine\Model\Playlist, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlaylistWithHttpInfo($playlist_id)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Playlist';
        $request = $this->getPlaylistRequest($playlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Thecodebunny\StreamingEngine\Model\Playlist',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlaylistAsync
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlaylistAsync($playlist_id)
    {
        return $this->getPlaylistAsyncWithHttpInfo($playlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlaylistAsyncWithHttpInfo
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlaylistAsyncWithHttpInfo($playlist_id)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Playlist';
        $request = $this->getPlaylistRequest($playlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlaylist'
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPlaylistRequest($playlist_id)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling getPlaylist'
            );
        }

        $resourcePath = '/v2/playlists/{playlistId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startPlaylist
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Thecodebunny\StreamingEngine\Model\Result
     */
    public function startPlaylist($playlist_id)
    {
        list($response) = $this->startPlaylistWithHttpInfo($playlist_id);
        return $response;
    }

    /**
     * Operation startPlaylistWithHttpInfo
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Thecodebunny\StreamingEngine\Model\Result, HTTP status code, HTTP response headers (array of strings)
     */
    public function startPlaylistWithHttpInfo($playlist_id)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->startPlaylistRequest($playlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Thecodebunny\StreamingEngine\Model\Result',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startPlaylistAsync
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPlaylistAsync($playlist_id)
    {
        return $this->startPlaylistAsyncWithHttpInfo($playlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startPlaylistAsyncWithHttpInfo
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPlaylistAsyncWithHttpInfo($playlist_id)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->startPlaylistRequest($playlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startPlaylist'
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startPlaylistRequest($playlist_id)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling startPlaylist'
            );
        }

        $resourcePath = '/v2/playlists/{playlistId}/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopPlaylist
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Thecodebunny\StreamingEngine\Model\Result
     */
    public function stopPlaylist($playlist_id)
    {
        list($response) = $this->stopPlaylistWithHttpInfo($playlist_id);
        return $response;
    }

    /**
     * Operation stopPlaylistWithHttpInfo
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \Thecodebunny\StreamingEngine\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Thecodebunny\StreamingEngine\Model\Result, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPlaylistWithHttpInfo($playlist_id)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->stopPlaylistRequest($playlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Thecodebunny\StreamingEngine\Model\Result',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopPlaylistAsync
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopPlaylistAsync($playlist_id)
    {
        return $this->stopPlaylistAsyncWithHttpInfo($playlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopPlaylistAsyncWithHttpInfo
     *
     * Playlist list from database
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopPlaylistAsyncWithHttpInfo($playlist_id)
    {
        $returnType = '\Thecodebunny\StreamingEngine\Model\Result';
        $request = $this->stopPlaylistRequest($playlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopPlaylist'
     *
     * @param  string $playlist_id id of the Playlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stopPlaylistRequest($playlist_id)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling stopPlaylist'
            );
        }

        $resourcePath = '/v2/playlists/{playlistId}/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
