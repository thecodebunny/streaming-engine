<?php
/**
 * WebRTCVideoSendStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */

/**
 * Streaming Server REST API Reference
 *
 * Streaming Server REST API Reference
 *
 * OpenAPI spec version: V2.0
 * Contact: contact@thecodebunny.com
 * Generated by: https://github.com/tcb-api/tcb-codegen.git
 * TCB Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the tcb code generator program.
 * https://github.com/tcb-api/tcb-codegen
 * Do not edit the class manually.
 */

namespace Thecodebunny\StreamingEngine\Model;

use \ArrayAccess;
use \Thecodebunny\StreamingEngine\ObjectSerializer;

/**
 * WebRTCVideoSendStats Class Doc Comment
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */
class WebRTCVideoSendStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $tcbModelName = 'WebRTCVideoSendStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbTypes = [
        'video_fir_count' => 'int',
        'video_pli_count' => 'int',
        'video_nack_count' => 'int',
        'video_packets_sent' => 'int',
        'video_frames_encoded' => 'int',
        'video_bytes_sent' => 'int',
        'video_packets_sent_per_second' => 'int',
        'video_bytes_sent_per_second' => 'int',
        'video_frames_encoded_per_second' => 'int',
        'time_ms' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbFormats = [
        'video_fir_count' => 'int64',
        'video_pli_count' => 'int64',
        'video_nack_count' => 'int64',
        'video_packets_sent' => 'int64',
        'video_frames_encoded' => 'int64',
        'video_bytes_sent' => null,
        'video_packets_sent_per_second' => 'int64',
        'video_bytes_sent_per_second' => null,
        'video_frames_encoded_per_second' => 'int64',
        'time_ms' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbTypes()
    {
        return self::$tcbTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbFormats()
    {
        return self::$tcbFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'video_fir_count' => 'videoFirCount',
        'video_pli_count' => 'videoPliCount',
        'video_nack_count' => 'videoNackCount',
        'video_packets_sent' => 'videoPacketsSent',
        'video_frames_encoded' => 'videoFramesEncoded',
        'video_bytes_sent' => 'videoBytesSent',
        'video_packets_sent_per_second' => 'videoPacketsSentPerSecond',
        'video_bytes_sent_per_second' => 'videoBytesSentPerSecond',
        'video_frames_encoded_per_second' => 'videoFramesEncodedPerSecond',
        'time_ms' => 'timeMs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'video_fir_count' => 'setVideoFirCount',
        'video_pli_count' => 'setVideoPliCount',
        'video_nack_count' => 'setVideoNackCount',
        'video_packets_sent' => 'setVideoPacketsSent',
        'video_frames_encoded' => 'setVideoFramesEncoded',
        'video_bytes_sent' => 'setVideoBytesSent',
        'video_packets_sent_per_second' => 'setVideoPacketsSentPerSecond',
        'video_bytes_sent_per_second' => 'setVideoBytesSentPerSecond',
        'video_frames_encoded_per_second' => 'setVideoFramesEncodedPerSecond',
        'time_ms' => 'setTimeMs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'video_fir_count' => 'getVideoFirCount',
        'video_pli_count' => 'getVideoPliCount',
        'video_nack_count' => 'getVideoNackCount',
        'video_packets_sent' => 'getVideoPacketsSent',
        'video_frames_encoded' => 'getVideoFramesEncoded',
        'video_bytes_sent' => 'getVideoBytesSent',
        'video_packets_sent_per_second' => 'getVideoPacketsSentPerSecond',
        'video_bytes_sent_per_second' => 'getVideoBytesSentPerSecond',
        'video_frames_encoded_per_second' => 'getVideoFramesEncodedPerSecond',
        'time_ms' => 'getTimeMs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$tcbModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['video_fir_count'] = isset($data['video_fir_count']) ? $data['video_fir_count'] : null;
        $this->container['video_pli_count'] = isset($data['video_pli_count']) ? $data['video_pli_count'] : null;
        $this->container['video_nack_count'] = isset($data['video_nack_count']) ? $data['video_nack_count'] : null;
        $this->container['video_packets_sent'] = isset($data['video_packets_sent']) ? $data['video_packets_sent'] : null;
        $this->container['video_frames_encoded'] = isset($data['video_frames_encoded']) ? $data['video_frames_encoded'] : null;
        $this->container['video_bytes_sent'] = isset($data['video_bytes_sent']) ? $data['video_bytes_sent'] : null;
        $this->container['video_packets_sent_per_second'] = isset($data['video_packets_sent_per_second']) ? $data['video_packets_sent_per_second'] : null;
        $this->container['video_bytes_sent_per_second'] = isset($data['video_bytes_sent_per_second']) ? $data['video_bytes_sent_per_second'] : null;
        $this->container['video_frames_encoded_per_second'] = isset($data['video_frames_encoded_per_second']) ? $data['video_frames_encoded_per_second'] : null;
        $this->container['time_ms'] = isset($data['time_ms']) ? $data['time_ms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets video_fir_count
     *
     * @return int
     */
    public function getVideoFirCount()
    {
        return $this->container['video_fir_count'];
    }

    /**
     * Sets video_fir_count
     *
     * @param int $video_fir_count video_fir_count
     *
     * @return $this
     */
    public function setVideoFirCount($video_fir_count)
    {
        $this->container['video_fir_count'] = $video_fir_count;

        return $this;
    }

    /**
     * Gets video_pli_count
     *
     * @return int
     */
    public function getVideoPliCount()
    {
        return $this->container['video_pli_count'];
    }

    /**
     * Sets video_pli_count
     *
     * @param int $video_pli_count video_pli_count
     *
     * @return $this
     */
    public function setVideoPliCount($video_pli_count)
    {
        $this->container['video_pli_count'] = $video_pli_count;

        return $this;
    }

    /**
     * Gets video_nack_count
     *
     * @return int
     */
    public function getVideoNackCount()
    {
        return $this->container['video_nack_count'];
    }

    /**
     * Sets video_nack_count
     *
     * @param int $video_nack_count video_nack_count
     *
     * @return $this
     */
    public function setVideoNackCount($video_nack_count)
    {
        $this->container['video_nack_count'] = $video_nack_count;

        return $this;
    }

    /**
     * Gets video_packets_sent
     *
     * @return int
     */
    public function getVideoPacketsSent()
    {
        return $this->container['video_packets_sent'];
    }

    /**
     * Sets video_packets_sent
     *
     * @param int $video_packets_sent video_packets_sent
     *
     * @return $this
     */
    public function setVideoPacketsSent($video_packets_sent)
    {
        $this->container['video_packets_sent'] = $video_packets_sent;

        return $this;
    }

    /**
     * Gets video_frames_encoded
     *
     * @return int
     */
    public function getVideoFramesEncoded()
    {
        return $this->container['video_frames_encoded'];
    }

    /**
     * Sets video_frames_encoded
     *
     * @param int $video_frames_encoded video_frames_encoded
     *
     * @return $this
     */
    public function setVideoFramesEncoded($video_frames_encoded)
    {
        $this->container['video_frames_encoded'] = $video_frames_encoded;

        return $this;
    }

    /**
     * Gets video_bytes_sent
     *
     * @return int
     */
    public function getVideoBytesSent()
    {
        return $this->container['video_bytes_sent'];
    }

    /**
     * Sets video_bytes_sent
     *
     * @param int $video_bytes_sent video_bytes_sent
     *
     * @return $this
     */
    public function setVideoBytesSent($video_bytes_sent)
    {
        $this->container['video_bytes_sent'] = $video_bytes_sent;

        return $this;
    }

    /**
     * Gets video_packets_sent_per_second
     *
     * @return int
     */
    public function getVideoPacketsSentPerSecond()
    {
        return $this->container['video_packets_sent_per_second'];
    }

    /**
     * Sets video_packets_sent_per_second
     *
     * @param int $video_packets_sent_per_second video_packets_sent_per_second
     *
     * @return $this
     */
    public function setVideoPacketsSentPerSecond($video_packets_sent_per_second)
    {
        $this->container['video_packets_sent_per_second'] = $video_packets_sent_per_second;

        return $this;
    }

    /**
     * Gets video_bytes_sent_per_second
     *
     * @return int
     */
    public function getVideoBytesSentPerSecond()
    {
        return $this->container['video_bytes_sent_per_second'];
    }

    /**
     * Sets video_bytes_sent_per_second
     *
     * @param int $video_bytes_sent_per_second video_bytes_sent_per_second
     *
     * @return $this
     */
    public function setVideoBytesSentPerSecond($video_bytes_sent_per_second)
    {
        $this->container['video_bytes_sent_per_second'] = $video_bytes_sent_per_second;

        return $this;
    }

    /**
     * Gets video_frames_encoded_per_second
     *
     * @return int
     */
    public function getVideoFramesEncodedPerSecond()
    {
        return $this->container['video_frames_encoded_per_second'];
    }

    /**
     * Sets video_frames_encoded_per_second
     *
     * @param int $video_frames_encoded_per_second video_frames_encoded_per_second
     *
     * @return $this
     */
    public function setVideoFramesEncodedPerSecond($video_frames_encoded_per_second)
    {
        $this->container['video_frames_encoded_per_second'] = $video_frames_encoded_per_second;

        return $this;
    }

    /**
     * Gets time_ms
     *
     * @return int
     */
    public function getTimeMs()
    {
        return $this->container['time_ms'];
    }

    /**
     * Sets time_ms
     *
     * @param int $time_ms time_ms
     *
     * @return $this
     */
    public function setTimeMs($time_ms)
    {
        $this->container['time_ms'] = $time_ms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


