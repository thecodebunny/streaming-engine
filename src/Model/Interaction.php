<?php
/**
 * Interaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */

/**
 * Streaming Server REST API Reference
 *
 * Streaming Server REST API Reference
 *
 * OpenAPI spec version: V2.0
 * Contact: contact@thecodebunny.com
 * Generated by: https://github.com/tcb-api/tcb-codegen.git
 * TCB Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the tcb code generator program.
 * https://github.com/tcb-api/tcb-codegen
 * Do not edit the class manually.
 */

namespace Thecodebunny\StreamingEngine\Model;

use \ArrayAccess;
use \Thecodebunny\StreamingEngine\ObjectSerializer;

/**
 * Interaction Class Doc Comment
 *
 * @category Class
 * @description The social media interaction for stream class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */
class Interaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $tcbModelName = 'Interaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbTypes = [
        'origin' => 'string',
        'like_count' => 'int',
        'wow_count' => 'int',
        'sad_count' => 'int',
        'angry_count' => 'int',
        'haha_count' => 'int',
        'love_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbFormats = [
        'origin' => null,
        'like_count' => 'int32',
        'wow_count' => 'int32',
        'sad_count' => 'int32',
        'angry_count' => 'int32',
        'haha_count' => 'int32',
        'love_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbTypes()
    {
        return self::$tcbTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbFormats()
    {
        return self::$tcbFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'origin' => 'origin',
        'like_count' => 'likeCount',
        'wow_count' => 'wowCount',
        'sad_count' => 'sadCount',
        'angry_count' => 'angryCount',
        'haha_count' => 'hahaCount',
        'love_count' => 'loveCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'origin' => 'setOrigin',
        'like_count' => 'setLikeCount',
        'wow_count' => 'setWowCount',
        'sad_count' => 'setSadCount',
        'angry_count' => 'setAngryCount',
        'haha_count' => 'setHahaCount',
        'love_count' => 'setLoveCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'origin' => 'getOrigin',
        'like_count' => 'getLikeCount',
        'wow_count' => 'getWowCount',
        'sad_count' => 'getSadCount',
        'angry_count' => 'getAngryCount',
        'haha_count' => 'getHahaCount',
        'love_count' => 'getLoveCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$tcbModelName;
    }

    const ORIGIN_FACEBOOK = 'facebook';
    const ORIGIN_PERISCOPE = 'periscope';
    const ORIGIN_YOUTUBE = 'youtube';
    const ORIGIN_SERVER = 'server';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginAllowableValues()
    {
        return [
            self::ORIGIN_FACEBOOK,
            self::ORIGIN_PERISCOPE,
            self::ORIGIN_YOUTUBE,
            self::ORIGIN_SERVER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['like_count'] = isset($data['like_count']) ? $data['like_count'] : null;
        $this->container['wow_count'] = isset($data['wow_count']) ? $data['wow_count'] : null;
        $this->container['sad_count'] = isset($data['sad_count']) ? $data['sad_count'] : null;
        $this->container['angry_count'] = isset($data['angry_count']) ? $data['angry_count'] : null;
        $this->container['haha_count'] = isset($data['haha_count']) ? $data['haha_count'] : null;
        $this->container['love_count'] = isset($data['love_count']) ? $data['love_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOriginAllowableValues();
        if (!is_null($this->container['origin']) && !in_array($this->container['origin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'origin', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin the origin of the resource
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $allowedValues = $this->getOriginAllowableValues();
        if (!is_null($origin) && !in_array($origin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'origin', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets like_count
     *
     * @return int
     */
    public function getLikeCount()
    {
        return $this->container['like_count'];
    }

    /**
     * Sets like_count
     *
     * @param int $like_count the total number of like interaction
     *
     * @return $this
     */
    public function setLikeCount($like_count)
    {
        $this->container['like_count'] = $like_count;

        return $this;
    }

    /**
     * Gets wow_count
     *
     * @return int
     */
    public function getWowCount()
    {
        return $this->container['wow_count'];
    }

    /**
     * Sets wow_count
     *
     * @param int $wow_count the total number of wow interaction
     *
     * @return $this
     */
    public function setWowCount($wow_count)
    {
        $this->container['wow_count'] = $wow_count;

        return $this;
    }

    /**
     * Gets sad_count
     *
     * @return int
     */
    public function getSadCount()
    {
        return $this->container['sad_count'];
    }

    /**
     * Sets sad_count
     *
     * @param int $sad_count the total number of sad interaction
     *
     * @return $this
     */
    public function setSadCount($sad_count)
    {
        $this->container['sad_count'] = $sad_count;

        return $this;
    }

    /**
     * Gets angry_count
     *
     * @return int
     */
    public function getAngryCount()
    {
        return $this->container['angry_count'];
    }

    /**
     * Sets angry_count
     *
     * @param int $angry_count the total number of angry interaction
     *
     * @return $this
     */
    public function setAngryCount($angry_count)
    {
        $this->container['angry_count'] = $angry_count;

        return $this;
    }

    /**
     * Gets haha_count
     *
     * @return int
     */
    public function getHahaCount()
    {
        return $this->container['haha_count'];
    }

    /**
     * Sets haha_count
     *
     * @param int $haha_count the total number of haha interaction
     *
     * @return $this
     */
    public function setHahaCount($haha_count)
    {
        $this->container['haha_count'] = $haha_count;

        return $this;
    }

    /**
     * Gets love_count
     *
     * @return int
     */
    public function getLoveCount()
    {
        return $this->container['love_count'];
    }

    /**
     * Sets love_count
     *
     * @param int $love_count the total number of like interaction
     *
     * @return $this
     */
    public function setLoveCount($love_count)
    {
        $this->container['love_count'] = $love_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


