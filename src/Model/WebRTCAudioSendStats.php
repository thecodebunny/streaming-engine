<?php
/**
 * WebRTCAudioSendStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */

/**
 * Streaming Server REST API Reference
 *
 * Streaming Server REST API Reference
 *
 * OpenAPI spec version: V2.0
 * Contact: contact@thecodebunny.com
 * Generated by: https://github.com/tcb-api/tcb-codegen.git
 * TCB Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the tcb code generator program.
 * https://github.com/tcb-api/tcb-codegen
 * Do not edit the class manually.
 */

namespace Thecodebunny\StreamingEngine\Model;

use \ArrayAccess;
use \Thecodebunny\StreamingEngine\ObjectSerializer;

/**
 * WebRTCAudioSendStats Class Doc Comment
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */
class WebRTCAudioSendStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $tcbModelName = 'WebRTCAudioSendStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbTypes = [
        'audio_packets_sent' => 'int',
        'audio_bytes_sent' => 'int',
        'audio_packets_per_second' => 'int',
        'audio_bytes_sent_per_second' => 'int',
        'time_ms' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbFormats = [
        'audio_packets_sent' => 'int64',
        'audio_bytes_sent' => null,
        'audio_packets_per_second' => 'int64',
        'audio_bytes_sent_per_second' => null,
        'time_ms' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbTypes()
    {
        return self::$tcbTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbFormats()
    {
        return self::$tcbFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_packets_sent' => 'audioPacketsSent',
        'audio_bytes_sent' => 'audioBytesSent',
        'audio_packets_per_second' => 'audioPacketsPerSecond',
        'audio_bytes_sent_per_second' => 'audioBytesSentPerSecond',
        'time_ms' => 'timeMs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_packets_sent' => 'setAudioPacketsSent',
        'audio_bytes_sent' => 'setAudioBytesSent',
        'audio_packets_per_second' => 'setAudioPacketsPerSecond',
        'audio_bytes_sent_per_second' => 'setAudioBytesSentPerSecond',
        'time_ms' => 'setTimeMs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_packets_sent' => 'getAudioPacketsSent',
        'audio_bytes_sent' => 'getAudioBytesSent',
        'audio_packets_per_second' => 'getAudioPacketsPerSecond',
        'audio_bytes_sent_per_second' => 'getAudioBytesSentPerSecond',
        'time_ms' => 'getTimeMs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$tcbModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_packets_sent'] = isset($data['audio_packets_sent']) ? $data['audio_packets_sent'] : null;
        $this->container['audio_bytes_sent'] = isset($data['audio_bytes_sent']) ? $data['audio_bytes_sent'] : null;
        $this->container['audio_packets_per_second'] = isset($data['audio_packets_per_second']) ? $data['audio_packets_per_second'] : null;
        $this->container['audio_bytes_sent_per_second'] = isset($data['audio_bytes_sent_per_second']) ? $data['audio_bytes_sent_per_second'] : null;
        $this->container['time_ms'] = isset($data['time_ms']) ? $data['time_ms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_packets_sent
     *
     * @return int
     */
    public function getAudioPacketsSent()
    {
        return $this->container['audio_packets_sent'];
    }

    /**
     * Sets audio_packets_sent
     *
     * @param int $audio_packets_sent audio_packets_sent
     *
     * @return $this
     */
    public function setAudioPacketsSent($audio_packets_sent)
    {
        $this->container['audio_packets_sent'] = $audio_packets_sent;

        return $this;
    }

    /**
     * Gets audio_bytes_sent
     *
     * @return int
     */
    public function getAudioBytesSent()
    {
        return $this->container['audio_bytes_sent'];
    }

    /**
     * Sets audio_bytes_sent
     *
     * @param int $audio_bytes_sent audio_bytes_sent
     *
     * @return $this
     */
    public function setAudioBytesSent($audio_bytes_sent)
    {
        $this->container['audio_bytes_sent'] = $audio_bytes_sent;

        return $this;
    }

    /**
     * Gets audio_packets_per_second
     *
     * @return int
     */
    public function getAudioPacketsPerSecond()
    {
        return $this->container['audio_packets_per_second'];
    }

    /**
     * Sets audio_packets_per_second
     *
     * @param int $audio_packets_per_second audio_packets_per_second
     *
     * @return $this
     */
    public function setAudioPacketsPerSecond($audio_packets_per_second)
    {
        $this->container['audio_packets_per_second'] = $audio_packets_per_second;

        return $this;
    }

    /**
     * Gets audio_bytes_sent_per_second
     *
     * @return int
     */
    public function getAudioBytesSentPerSecond()
    {
        return $this->container['audio_bytes_sent_per_second'];
    }

    /**
     * Sets audio_bytes_sent_per_second
     *
     * @param int $audio_bytes_sent_per_second audio_bytes_sent_per_second
     *
     * @return $this
     */
    public function setAudioBytesSentPerSecond($audio_bytes_sent_per_second)
    {
        $this->container['audio_bytes_sent_per_second'] = $audio_bytes_sent_per_second;

        return $this;
    }

    /**
     * Gets time_ms
     *
     * @return int
     */
    public function getTimeMs()
    {
        return $this->container['time_ms'];
    }

    /**
     * Sets time_ms
     *
     * @param int $time_ms time_ms
     *
     * @return $this
     */
    public function setTimeMs($time_ms)
    {
        $this->container['time_ms'] = $time_ms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


