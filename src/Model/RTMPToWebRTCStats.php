<?php
/**
 * RTMPToWebRTCStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */

/**
 * Streaming Server REST API Reference
 *
 * Streaming Server REST API Reference
 *
 * OpenAPI spec version: V2.0
 * Contact: contact@thecodebunny.com
 * Generated by: https://github.com/tcb-api/tcb-codegen.git
 * TCB Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the tcb code generator program.
 * https://github.com/tcb-api/tcb-codegen
 * Do not edit the class manually.
 */

namespace Thecodebunny\StreamingEngine\Model;

use \ArrayAccess;
use \Thecodebunny\StreamingEngine\ObjectSerializer;

/**
 * RTMPToWebRTCStats Class Doc Comment
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */
class RTMPToWebRTCStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $tcbModelName = 'RTMPToWebRTCStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbTypes = [
        'stream_id' => 'string',
        'encoder_count' => 'int',
        'total_video_ingest_time' => 'int',
        'total_ingested_video_packet_count' => 'int',
        'total_video_decode_time' => 'int',
        'total_decoded_video_frame_count' => 'int',
        'total_video_encode_queue_time' => 'int',
        'total_video_encode_time' => 'int',
        'total_encoded_video_packet_count' => 'int',
        'total_video_delivery_time' => 'int',
        'total_delivered_video_packet_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbFormats = [
        'stream_id' => null,
        'encoder_count' => 'int32',
        'total_video_ingest_time' => 'int64',
        'total_ingested_video_packet_count' => 'int64',
        'total_video_decode_time' => 'int64',
        'total_decoded_video_frame_count' => 'int64',
        'total_video_encode_queue_time' => 'int64',
        'total_video_encode_time' => 'int64',
        'total_encoded_video_packet_count' => 'int64',
        'total_video_delivery_time' => 'int64',
        'total_delivered_video_packet_count' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbTypes()
    {
        return self::$tcbTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbFormats()
    {
        return self::$tcbFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stream_id' => 'streamId',
        'encoder_count' => 'encoderCount',
        'total_video_ingest_time' => 'totalVideoIngestTime',
        'total_ingested_video_packet_count' => 'totalIngestedVideoPacketCount',
        'total_video_decode_time' => 'totalVideoDecodeTime',
        'total_decoded_video_frame_count' => 'totalDecodedVideoFrameCount',
        'total_video_encode_queue_time' => 'totalVideoEncodeQueueTime',
        'total_video_encode_time' => 'totalVideoEncodeTime',
        'total_encoded_video_packet_count' => 'totalEncodedVideoPacketCount',
        'total_video_delivery_time' => 'totalVideoDeliveryTime',
        'total_delivered_video_packet_count' => 'totalDeliveredVideoPacketCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stream_id' => 'setStreamId',
        'encoder_count' => 'setEncoderCount',
        'total_video_ingest_time' => 'setTotalVideoIngestTime',
        'total_ingested_video_packet_count' => 'setTotalIngestedVideoPacketCount',
        'total_video_decode_time' => 'setTotalVideoDecodeTime',
        'total_decoded_video_frame_count' => 'setTotalDecodedVideoFrameCount',
        'total_video_encode_queue_time' => 'setTotalVideoEncodeQueueTime',
        'total_video_encode_time' => 'setTotalVideoEncodeTime',
        'total_encoded_video_packet_count' => 'setTotalEncodedVideoPacketCount',
        'total_video_delivery_time' => 'setTotalVideoDeliveryTime',
        'total_delivered_video_packet_count' => 'setTotalDeliveredVideoPacketCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stream_id' => 'getStreamId',
        'encoder_count' => 'getEncoderCount',
        'total_video_ingest_time' => 'getTotalVideoIngestTime',
        'total_ingested_video_packet_count' => 'getTotalIngestedVideoPacketCount',
        'total_video_decode_time' => 'getTotalVideoDecodeTime',
        'total_decoded_video_frame_count' => 'getTotalDecodedVideoFrameCount',
        'total_video_encode_queue_time' => 'getTotalVideoEncodeQueueTime',
        'total_video_encode_time' => 'getTotalVideoEncodeTime',
        'total_encoded_video_packet_count' => 'getTotalEncodedVideoPacketCount',
        'total_video_delivery_time' => 'getTotalVideoDeliveryTime',
        'total_delivered_video_packet_count' => 'getTotalDeliveredVideoPacketCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$tcbModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stream_id'] = isset($data['stream_id']) ? $data['stream_id'] : null;
        $this->container['encoder_count'] = isset($data['encoder_count']) ? $data['encoder_count'] : null;
        $this->container['total_video_ingest_time'] = isset($data['total_video_ingest_time']) ? $data['total_video_ingest_time'] : null;
        $this->container['total_ingested_video_packet_count'] = isset($data['total_ingested_video_packet_count']) ? $data['total_ingested_video_packet_count'] : null;
        $this->container['total_video_decode_time'] = isset($data['total_video_decode_time']) ? $data['total_video_decode_time'] : null;
        $this->container['total_decoded_video_frame_count'] = isset($data['total_decoded_video_frame_count']) ? $data['total_decoded_video_frame_count'] : null;
        $this->container['total_video_encode_queue_time'] = isset($data['total_video_encode_queue_time']) ? $data['total_video_encode_queue_time'] : null;
        $this->container['total_video_encode_time'] = isset($data['total_video_encode_time']) ? $data['total_video_encode_time'] : null;
        $this->container['total_encoded_video_packet_count'] = isset($data['total_encoded_video_packet_count']) ? $data['total_encoded_video_packet_count'] : null;
        $this->container['total_video_delivery_time'] = isset($data['total_video_delivery_time']) ? $data['total_video_delivery_time'] : null;
        $this->container['total_delivered_video_packet_count'] = isset($data['total_delivered_video_packet_count']) ? $data['total_delivered_video_packet_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stream_id
     *
     * @return string
     */
    public function getStreamId()
    {
        return $this->container['stream_id'];
    }

    /**
     * Sets stream_id
     *
     * @param string $stream_id stream_id
     *
     * @return $this
     */
    public function setStreamId($stream_id)
    {
        $this->container['stream_id'] = $stream_id;

        return $this;
    }

    /**
     * Gets encoder_count
     *
     * @return int
     */
    public function getEncoderCount()
    {
        return $this->container['encoder_count'];
    }

    /**
     * Sets encoder_count
     *
     * @param int $encoder_count encoder_count
     *
     * @return $this
     */
    public function setEncoderCount($encoder_count)
    {
        $this->container['encoder_count'] = $encoder_count;

        return $this;
    }

    /**
     * Gets total_video_ingest_time
     *
     * @return int
     */
    public function getTotalVideoIngestTime()
    {
        return $this->container['total_video_ingest_time'];
    }

    /**
     * Sets total_video_ingest_time
     *
     * @param int $total_video_ingest_time total_video_ingest_time
     *
     * @return $this
     */
    public function setTotalVideoIngestTime($total_video_ingest_time)
    {
        $this->container['total_video_ingest_time'] = $total_video_ingest_time;

        return $this;
    }

    /**
     * Gets total_ingested_video_packet_count
     *
     * @return int
     */
    public function getTotalIngestedVideoPacketCount()
    {
        return $this->container['total_ingested_video_packet_count'];
    }

    /**
     * Sets total_ingested_video_packet_count
     *
     * @param int $total_ingested_video_packet_count total_ingested_video_packet_count
     *
     * @return $this
     */
    public function setTotalIngestedVideoPacketCount($total_ingested_video_packet_count)
    {
        $this->container['total_ingested_video_packet_count'] = $total_ingested_video_packet_count;

        return $this;
    }

    /**
     * Gets total_video_decode_time
     *
     * @return int
     */
    public function getTotalVideoDecodeTime()
    {
        return $this->container['total_video_decode_time'];
    }

    /**
     * Sets total_video_decode_time
     *
     * @param int $total_video_decode_time total_video_decode_time
     *
     * @return $this
     */
    public function setTotalVideoDecodeTime($total_video_decode_time)
    {
        $this->container['total_video_decode_time'] = $total_video_decode_time;

        return $this;
    }

    /**
     * Gets total_decoded_video_frame_count
     *
     * @return int
     */
    public function getTotalDecodedVideoFrameCount()
    {
        return $this->container['total_decoded_video_frame_count'];
    }

    /**
     * Sets total_decoded_video_frame_count
     *
     * @param int $total_decoded_video_frame_count total_decoded_video_frame_count
     *
     * @return $this
     */
    public function setTotalDecodedVideoFrameCount($total_decoded_video_frame_count)
    {
        $this->container['total_decoded_video_frame_count'] = $total_decoded_video_frame_count;

        return $this;
    }

    /**
     * Gets total_video_encode_queue_time
     *
     * @return int
     */
    public function getTotalVideoEncodeQueueTime()
    {
        return $this->container['total_video_encode_queue_time'];
    }

    /**
     * Sets total_video_encode_queue_time
     *
     * @param int $total_video_encode_queue_time total_video_encode_queue_time
     *
     * @return $this
     */
    public function setTotalVideoEncodeQueueTime($total_video_encode_queue_time)
    {
        $this->container['total_video_encode_queue_time'] = $total_video_encode_queue_time;

        return $this;
    }

    /**
     * Gets total_video_encode_time
     *
     * @return int
     */
    public function getTotalVideoEncodeTime()
    {
        return $this->container['total_video_encode_time'];
    }

    /**
     * Sets total_video_encode_time
     *
     * @param int $total_video_encode_time total_video_encode_time
     *
     * @return $this
     */
    public function setTotalVideoEncodeTime($total_video_encode_time)
    {
        $this->container['total_video_encode_time'] = $total_video_encode_time;

        return $this;
    }

    /**
     * Gets total_encoded_video_packet_count
     *
     * @return int
     */
    public function getTotalEncodedVideoPacketCount()
    {
        return $this->container['total_encoded_video_packet_count'];
    }

    /**
     * Sets total_encoded_video_packet_count
     *
     * @param int $total_encoded_video_packet_count total_encoded_video_packet_count
     *
     * @return $this
     */
    public function setTotalEncodedVideoPacketCount($total_encoded_video_packet_count)
    {
        $this->container['total_encoded_video_packet_count'] = $total_encoded_video_packet_count;

        return $this;
    }

    /**
     * Gets total_video_delivery_time
     *
     * @return int
     */
    public function getTotalVideoDeliveryTime()
    {
        return $this->container['total_video_delivery_time'];
    }

    /**
     * Sets total_video_delivery_time
     *
     * @param int $total_video_delivery_time total_video_delivery_time
     *
     * @return $this
     */
    public function setTotalVideoDeliveryTime($total_video_delivery_time)
    {
        $this->container['total_video_delivery_time'] = $total_video_delivery_time;

        return $this;
    }

    /**
     * Gets total_delivered_video_packet_count
     *
     * @return int
     */
    public function getTotalDeliveredVideoPacketCount()
    {
        return $this->container['total_delivered_video_packet_count'];
    }

    /**
     * Sets total_delivered_video_packet_count
     *
     * @param int $total_delivered_video_packet_count total_delivered_video_packet_count
     *
     * @return $this
     */
    public function setTotalDeliveredVideoPacketCount($total_delivered_video_packet_count)
    {
        $this->container['total_delivered_video_packet_count'] = $total_delivered_video_packet_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


