<?php
/**
 * Playlist
 *
 * PHP version 5
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */

/**
 * Streaming Server REST API Reference
 *
 * Streaming Server REST API Reference
 *
 * OpenAPI spec version: V2.0
 * Contact: contact@thecodebunny.com
 * Generated by: https://github.com/tcb-api/tcb-codegen.git
 * TCB Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the tcb code generator program.
 * https://github.com/tcb-api/tcb-codegen
 * Do not edit the class manually.
 */

namespace Thecodebunny\StreamingEngine\Model;

use \ArrayAccess;
use \Thecodebunny\StreamingEngine\ObjectSerializer;

/**
 * Playlist Class Doc Comment
 *
 * @category Class
 * @description The playlist in video list object class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */
class Playlist implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $tcbModelName = 'Playlist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbTypes = [
        'playlist_id' => 'string',
        'current_play_index' => 'int',
        'playlist_name' => 'string',
        'playlist_status' => 'string',
        'broadcast_item_list' => '\Thecodebunny\StreamingEngine\Model\Broadcast[]',
        'creation_date' => 'int',
        'duration' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbFormats = [
        'playlist_id' => null,
        'current_play_index' => 'int32',
        'playlist_name' => null,
        'playlist_status' => null,
        'broadcast_item_list' => null,
        'creation_date' => 'int64',
        'duration' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbTypes()
    {
        return self::$tcbTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbFormats()
    {
        return self::$tcbFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'playlist_id' => 'playlistId',
        'current_play_index' => 'currentPlayIndex',
        'playlist_name' => 'playlistName',
        'playlist_status' => 'playlistStatus',
        'broadcast_item_list' => 'broadcastItemList',
        'creation_date' => 'creationDate',
        'duration' => 'duration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'playlist_id' => 'setPlaylistId',
        'current_play_index' => 'setCurrentPlayIndex',
        'playlist_name' => 'setPlaylistName',
        'playlist_status' => 'setPlaylistStatus',
        'broadcast_item_list' => 'setBroadcastItemList',
        'creation_date' => 'setCreationDate',
        'duration' => 'setDuration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'playlist_id' => 'getPlaylistId',
        'current_play_index' => 'getCurrentPlayIndex',
        'playlist_name' => 'getPlaylistName',
        'playlist_status' => 'getPlaylistStatus',
        'broadcast_item_list' => 'getBroadcastItemList',
        'creation_date' => 'getCreationDate',
        'duration' => 'getDuration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$tcbModelName;
    }

    const PLAYLIST_STATUS_FINISHED = 'finished';
    const PLAYLIST_STATUS_BROADCASTING = 'broadcasting';
    const PLAYLIST_STATUS_CREATED = 'created';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlaylistStatusAllowableValues()
    {
        return [
            self::PLAYLIST_STATUS_FINISHED,
            self::PLAYLIST_STATUS_BROADCASTING,
            self::PLAYLIST_STATUS_CREATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['playlist_id'] = isset($data['playlist_id']) ? $data['playlist_id'] : null;
        $this->container['current_play_index'] = isset($data['current_play_index']) ? $data['current_play_index'] : null;
        $this->container['playlist_name'] = isset($data['playlist_name']) ? $data['playlist_name'] : null;
        $this->container['playlist_status'] = isset($data['playlist_status']) ? $data['playlist_status'] : null;
        $this->container['broadcast_item_list'] = isset($data['broadcast_item_list']) ? $data['broadcast_item_list'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPlaylistStatusAllowableValues();
        if (!is_null($this->container['playlist_status']) && !in_array($this->container['playlist_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'playlist_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets playlist_id
     *
     * @return string
     */
    public function getPlaylistId()
    {
        return $this->container['playlist_id'];
    }

    /**
     * Sets playlist_id
     *
     * @param string $playlist_id the object id of the Playlist
     *
     * @return $this
     */
    public function setPlaylistId($playlist_id)
    {
        $this->container['playlist_id'] = $playlist_id;

        return $this;
    }

    /**
     * Gets current_play_index
     *
     * @return int
     */
    public function getCurrentPlayIndex()
    {
        return $this->container['current_play_index'];
    }

    /**
     * Sets current_play_index
     *
     * @param int $current_play_index the current play index of the Playlist
     *
     * @return $this
     */
    public function setCurrentPlayIndex($current_play_index)
    {
        $this->container['current_play_index'] = $current_play_index;

        return $this;
    }

    /**
     * Gets playlist_name
     *
     * @return string
     */
    public function getPlaylistName()
    {
        return $this->container['playlist_name'];
    }

    /**
     * Sets playlist_name
     *
     * @param string $playlist_name the name of the Playlist
     *
     * @return $this
     */
    public function setPlaylistName($playlist_name)
    {
        $this->container['playlist_name'] = $playlist_name;

        return $this;
    }

    /**
     * Gets playlist_status
     *
     * @return string
     */
    public function getPlaylistStatus()
    {
        return $this->container['playlist_status'];
    }

    /**
     * Sets playlist_status
     *
     * @param string $playlist_status the status of the playlist
     *
     * @return $this
     */
    public function setPlaylistStatus($playlist_status)
    {
        $allowedValues = $this->getPlaylistStatusAllowableValues();
        if (!is_null($playlist_status) && !in_array($playlist_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'playlist_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['playlist_status'] = $playlist_status;

        return $this;
    }

    /**
     * Gets broadcast_item_list
     *
     * @return \Thecodebunny\StreamingEngine\Model\Broadcast[]
     */
    public function getBroadcastItemList()
    {
        return $this->container['broadcast_item_list'];
    }

    /**
     * Sets broadcast_item_list
     *
     * @param \Thecodebunny\StreamingEngine\Model\Broadcast[] $broadcast_item_list the list broadcasts of Playlist Items
     *
     * @return $this
     */
    public function setBroadcastItemList($broadcast_item_list)
    {
        $this->container['broadcast_item_list'] = $broadcast_item_list;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return int
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param int $creation_date the creation of the Playlist
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration the duration of the Playlist
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


