<?php
/**
 * Endpoint
 *
 * PHP version 5
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */

/**
 * Streaming Server REST API Reference
 *
 * Streaming Server REST API Reference
 *
 * OpenAPI spec version: V2.0
 * Contact: contact@thecodebunny.com
 * Generated by: https://github.com/tcb-api/tcb-codegen.git
 * TCB Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the tcb code generator program.
 * https://github.com/tcb-api/tcb-codegen
 * Do not edit the class manually.
 */

namespace Thecodebunny\StreamingEngine\Model;

use \ArrayAccess;
use \Thecodebunny\StreamingEngine\ObjectSerializer;

/**
 * Endpoint Class Doc Comment
 *
 * @category Class
 * @description The endpoint class, such as Facebook, Twitter or custom RTMP endpoints
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */
class Endpoint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $tcbModelName = 'Endpoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbTypes = [
        'type' => 'string',
        'broadcast_id' => 'string',
        'stream_id' => 'string',
        'rtmp_url' => 'string',
        'name' => 'string',
        'endpoint_service_id' => 'string',
        'server_stream_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbFormats = [
        'type' => null,
        'broadcast_id' => null,
        'stream_id' => null,
        'rtmp_url' => null,
        'name' => null,
        'endpoint_service_id' => null,
        'server_stream_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbTypes()
    {
        return self::$tcbTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbFormats()
    {
        return self::$tcbFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'broadcast_id' => 'broadcastId',
        'stream_id' => 'streamId',
        'rtmp_url' => 'rtmpUrl',
        'name' => 'name',
        'endpoint_service_id' => 'endpointServiceId',
        'server_stream_id' => 'serverStreamId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'broadcast_id' => 'setBroadcastId',
        'stream_id' => 'setStreamId',
        'rtmp_url' => 'setRtmpUrl',
        'name' => 'setName',
        'endpoint_service_id' => 'setEndpointServiceId',
        'server_stream_id' => 'setServerStreamId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'broadcast_id' => 'getBroadcastId',
        'stream_id' => 'getStreamId',
        'rtmp_url' => 'getRtmpUrl',
        'name' => 'getName',
        'endpoint_service_id' => 'getEndpointServiceId',
        'server_stream_id' => 'getServerStreamId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$tcbModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['broadcast_id'] = isset($data['broadcast_id']) ? $data['broadcast_id'] : null;
        $this->container['stream_id'] = isset($data['stream_id']) ? $data['stream_id'] : null;
        $this->container['rtmp_url'] = isset($data['rtmp_url']) ? $data['rtmp_url'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['endpoint_service_id'] = isset($data['endpoint_service_id']) ? $data['endpoint_service_id'] : null;
        $this->container['server_stream_id'] = isset($data['server_stream_id']) ? $data['server_stream_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type the service name like facebook, periscope, youtube or generic
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets broadcast_id
     *
     * @return string
     */
    public function getBroadcastId()
    {
        return $this->container['broadcast_id'];
    }

    /**
     * Sets broadcast_id
     *
     * @param string $broadcast_id the id in the end point, Social endpoints has this field but generic endpoint does not have
     *
     * @return $this
     */
    public function setBroadcastId($broadcast_id)
    {
        $this->container['broadcast_id'] = $broadcast_id;

        return $this;
    }

    /**
     * Gets stream_id
     *
     * @return string
     */
    public function getStreamId()
    {
        return $this->container['stream_id'];
    }

    /**
     * Sets stream_id
     *
     * @param string $stream_id the id in the endpoint if exists, it may be null
     *
     * @return $this
     */
    public function setStreamId($stream_id)
    {
        $this->container['stream_id'] = $stream_id;

        return $this;
    }

    /**
     * Gets rtmp_url
     *
     * @return string
     */
    public function getRtmpUrl()
    {
        return $this->container['rtmp_url'];
    }

    /**
     * Sets rtmp_url
     *
     * @param string $rtmp_url the RTMP URL of the endpoint
     *
     * @return $this
     */
    public function setRtmpUrl($rtmp_url)
    {
        $this->container['rtmp_url'] = $rtmp_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name the name of the stream
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets endpoint_service_id
     *
     * @return string
     */
    public function getEndpointServiceId()
    {
        return $this->container['endpoint_service_id'];
    }

    /**
     * Sets endpoint_service_id
     *
     * @param string $endpoint_service_id the endpoint service id, this field holds the id of the endpoint
     *
     * @return $this
     */
    public function setEndpointServiceId($endpoint_service_id)
    {
        $this->container['endpoint_service_id'] = $endpoint_service_id;

        return $this;
    }

    /**
     * Gets server_stream_id
     *
     * @return string
     */
    public function getServerStreamId()
    {
        return $this->container['server_stream_id'];
    }

    /**
     * Sets server_stream_id
     *
     * @param string $server_stream_id the id of the stream in the server
     *
     * @return $this
     */
    public function setServerStreamId($server_stream_id)
    {
        $this->container['server_stream_id'] = $server_stream_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


