<?php
/**
 * WebRTCClientStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */

/**
 * Streaming Server REST API Reference
 *
 * Streaming Server REST API Reference
 *
 * OpenAPI spec version: V2.0
 * Contact: contact@thecodebunny.com
 * Generated by: https://github.com/tcb-api/tcb-codegen.git
 * TCB Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the tcb code generator program.
 * https://github.com/tcb-api/tcb-codegen
 * Do not edit the class manually.
 */

namespace Thecodebunny\StreamingEngine\Model;

use \ArrayAccess;
use \Thecodebunny\StreamingEngine\ObjectSerializer;

/**
 * WebRTCClientStats Class Doc Comment
 *
 * @category Class
 * @description The WebRTC Client Statistics class
 * @package  Thecodebunny\StreamingEngine
 * @author   TCB Codegen team
 * @link     https://github.com/tcb-api/tcb-codegen
 */
class WebRTCClientStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $tcbModelName = 'WebRTCClientStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbTypes = [
        'measured_bitrate' => 'int',
        'send_bitrate' => 'int',
        'video_frame_send_period' => 'double',
        'audio_frame_send_period' => 'double',
        'client_id' => 'int',
        'video_packet_count' => 'int',
        'audio_packet_count' => 'int',
        'video_sent_stats' => '\Thecodebunny\StreamingEngine\Model\WebRTCVideoSendStats',
        'audio_sent_stats' => '\Thecodebunny\StreamingEngine\Model\WebRTCAudioSendStats'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $tcbFormats = [
        'measured_bitrate' => 'int32',
        'send_bitrate' => 'int32',
        'video_frame_send_period' => 'double',
        'audio_frame_send_period' => 'double',
        'client_id' => 'int32',
        'video_packet_count' => 'int64',
        'audio_packet_count' => 'int64',
        'video_sent_stats' => null,
        'audio_sent_stats' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbTypes()
    {
        return self::$tcbTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function tcbFormats()
    {
        return self::$tcbFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'measured_bitrate' => 'measuredBitrate',
        'send_bitrate' => 'sendBitrate',
        'video_frame_send_period' => 'videoFrameSendPeriod',
        'audio_frame_send_period' => 'audioFrameSendPeriod',
        'client_id' => 'clientId',
        'video_packet_count' => 'videoPacketCount',
        'audio_packet_count' => 'audioPacketCount',
        'video_sent_stats' => 'videoSentStats',
        'audio_sent_stats' => 'audioSentStats'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'measured_bitrate' => 'setMeasuredBitrate',
        'send_bitrate' => 'setSendBitrate',
        'video_frame_send_period' => 'setVideoFrameSendPeriod',
        'audio_frame_send_period' => 'setAudioFrameSendPeriod',
        'client_id' => 'setClientId',
        'video_packet_count' => 'setVideoPacketCount',
        'audio_packet_count' => 'setAudioPacketCount',
        'video_sent_stats' => 'setVideoSentStats',
        'audio_sent_stats' => 'setAudioSentStats'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'measured_bitrate' => 'getMeasuredBitrate',
        'send_bitrate' => 'getSendBitrate',
        'video_frame_send_period' => 'getVideoFrameSendPeriod',
        'audio_frame_send_period' => 'getAudioFrameSendPeriod',
        'client_id' => 'getClientId',
        'video_packet_count' => 'getVideoPacketCount',
        'audio_packet_count' => 'getAudioPacketCount',
        'video_sent_stats' => 'getVideoSentStats',
        'audio_sent_stats' => 'getAudioSentStats'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$tcbModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['measured_bitrate'] = isset($data['measured_bitrate']) ? $data['measured_bitrate'] : null;
        $this->container['send_bitrate'] = isset($data['send_bitrate']) ? $data['send_bitrate'] : null;
        $this->container['video_frame_send_period'] = isset($data['video_frame_send_period']) ? $data['video_frame_send_period'] : null;
        $this->container['audio_frame_send_period'] = isset($data['audio_frame_send_period']) ? $data['audio_frame_send_period'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['video_packet_count'] = isset($data['video_packet_count']) ? $data['video_packet_count'] : null;
        $this->container['audio_packet_count'] = isset($data['audio_packet_count']) ? $data['audio_packet_count'] : null;
        $this->container['video_sent_stats'] = isset($data['video_sent_stats']) ? $data['video_sent_stats'] : null;
        $this->container['audio_sent_stats'] = isset($data['audio_sent_stats']) ? $data['audio_sent_stats'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets measured_bitrate
     *
     * @return int
     */
    public function getMeasuredBitrate()
    {
        return $this->container['measured_bitrate'];
    }

    /**
     * Sets measured_bitrate
     *
     * @param int $measured_bitrate the measured bitrate of the WebRTC Client
     *
     * @return $this
     */
    public function setMeasuredBitrate($measured_bitrate)
    {
        $this->container['measured_bitrate'] = $measured_bitrate;

        return $this;
    }

    /**
     * Gets send_bitrate
     *
     * @return int
     */
    public function getSendBitrate()
    {
        return $this->container['send_bitrate'];
    }

    /**
     * Sets send_bitrate
     *
     * @param int $send_bitrate the sent bitrate of the WebRTC Client
     *
     * @return $this
     */
    public function setSendBitrate($send_bitrate)
    {
        $this->container['send_bitrate'] = $send_bitrate;

        return $this;
    }

    /**
     * Gets video_frame_send_period
     *
     * @return double
     */
    public function getVideoFrameSendPeriod()
    {
        return $this->container['video_frame_send_period'];
    }

    /**
     * Sets video_frame_send_period
     *
     * @param double $video_frame_send_period the video frame sent period of the WebRTC Client
     *
     * @return $this
     */
    public function setVideoFrameSendPeriod($video_frame_send_period)
    {
        $this->container['video_frame_send_period'] = $video_frame_send_period;

        return $this;
    }

    /**
     * Gets audio_frame_send_period
     *
     * @return double
     */
    public function getAudioFrameSendPeriod()
    {
        return $this->container['audio_frame_send_period'];
    }

    /**
     * Sets audio_frame_send_period
     *
     * @param double $audio_frame_send_period the audio frame send period of the WebRTC Client
     *
     * @return $this
     */
    public function setAudioFrameSendPeriod($audio_frame_send_period)
    {
        $this->container['audio_frame_send_period'] = $audio_frame_send_period;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id WebRTC Client Id which is basically hash of the object
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets video_packet_count
     *
     * @return int
     */
    public function getVideoPacketCount()
    {
        return $this->container['video_packet_count'];
    }

    /**
     * Sets video_packet_count
     *
     * @param int $video_packet_count Number of video packets sent
     *
     * @return $this
     */
    public function setVideoPacketCount($video_packet_count)
    {
        $this->container['video_packet_count'] = $video_packet_count;

        return $this;
    }

    /**
     * Gets audio_packet_count
     *
     * @return int
     */
    public function getAudioPacketCount()
    {
        return $this->container['audio_packet_count'];
    }

    /**
     * Sets audio_packet_count
     *
     * @param int $audio_packet_count Number of audio packets sent
     *
     * @return $this
     */
    public function setAudioPacketCount($audio_packet_count)
    {
        $this->container['audio_packet_count'] = $audio_packet_count;

        return $this;
    }

    /**
     * Gets video_sent_stats
     *
     * @return \Thecodebunny\StreamingEngine\Model\WebRTCVideoSendStats
     */
    public function getVideoSentStats()
    {
        return $this->container['video_sent_stats'];
    }

    /**
     * Sets video_sent_stats
     *
     * @param \Thecodebunny\StreamingEngine\Model\WebRTCVideoSendStats $video_sent_stats Video sent low level stats
     *
     * @return $this
     */
    public function setVideoSentStats($video_sent_stats)
    {
        $this->container['video_sent_stats'] = $video_sent_stats;

        return $this;
    }

    /**
     * Gets audio_sent_stats
     *
     * @return \Thecodebunny\StreamingEngine\Model\WebRTCAudioSendStats
     */
    public function getAudioSentStats()
    {
        return $this->container['audio_sent_stats'];
    }

    /**
     * Sets audio_sent_stats
     *
     * @param \Thecodebunny\StreamingEngine\Model\WebRTCAudioSendStats $audio_sent_stats Audio sent low level stats
     *
     * @return $this
     */
    public function setAudioSentStats($audio_sent_stats)
    {
        $this->container['audio_sent_stats'] = $audio_sent_stats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


